#include <XAMPPanalyses/HeavyIonAnalysisHelper.h>
#include <XAMPPanalyses/Stop0LAnalysisUtils.h>
//#include <XAMPPanalyses/Stop0LISRSelector.h>
#include "xAODHIEvent/HIEventShapeContainer.h"
#include <HIEventUtils/IHICentralityTool.h>
#include <HIEventUtils/HICentralityTool.h>
//#include "xAODMuon/MuonContainer.h"
#include "xAODMuon/Muon.h"
#include "xAODJet/JetContainer.h"
#include "xAODJet/Jet.h"
#include "xAODEventInfo/EventInfo.h"
#include "xAODMuon/MuonContainer.h"
#include "xAODTracking/TrackingPrimitives.h"
#include "xAODTracking/TrackParticleContainer.h"
#include "MuonMomentumCorrections/IMuonCalibrationAndSmearingTool.h"
#include "xAODTracking/VertexContainer.h"
#include "xAODEventInfo/EventInfo.h"

// Local include(s):
#include "MuonSelectorTools/errorcheck.h"
#include "MuonSelectorTools/MuonSelectionTool.h"




using std::string;
using std::unique_ptr;
using CxxUtils::make_unique;
namespace XAMPP {
    HeavyIonAnalysisHelper::HeavyIonAnalysisHelper(std::string myname) :
            SUSYAnalysisHelper(myname){
    }
    StatusCode HeavyIonAnalysisHelper::initializeObjectTools() {
        ATH_CHECK(SUSYAnalysisHelper::initializeObjectTools());
        return StatusCode::SUCCESS;
    }
    StatusCode HeavyIonAnalysisHelper::initialize() {
        ATH_MSG_INFO("Initialising Heavy Ion AnalysisHelper...");

        ATH_CHECK(SUSYAnalysisHelper::initialize());

        return StatusCode::SUCCESS;
    }

    StatusCode HeavyIonAnalysisHelper::initializeEventVariables() {

        //Lets define some variables which we want to store in the output tree / use in the cutflow
        //ATH_CHECK(m_XAMPPInfo->NewEventVariable<int>("N_BJets"));
        ATH_CHECK(m_XAMPPInfo->NewEventVariable<int>("N_SignalLeptons"));
        ATH_CHECK(m_XAMPPInfo->NewEventVariable<int>("N_BaselineLeptons")); //A variable on which we are cutting does not need to be stored in the tree
        ATH_CHECK(m_XAMPPInfo->NewEventVariable<int>("N_Jets"));
        ATH_CHECK(m_XAMPPInfo->NewEventVariable<char>("IsOS"));
        ATH_CHECK(m_XAMPPInfo->NewEventVariable<char>("IsSF"));
        //ATH_CHECK(m_XAMPPInfo->NewEventVariable<float>("Mmuon"));
        ATH_CHECK(m_XAMPPInfo->NewEventVariable<float>("Mll"));
        ATH_CHECK(m_XAMPPInfo->NewEventVariable<float>("HT"));
        ATH_CHECK(m_XAMPPInfo->NewEventVariable<float>("HtSig"));
        ATH_CHECK(m_XAMPPInfo->NewEventVariable<float>("Meff"));
        ATH_CHECK(m_XAMPPInfo->NewEventVariable<float>("ZWindow"));
        if (!isData()) ATH_CHECK(m_XAMPPInfo->NewEventVariable<double>("TotalWeight"));
        if (!isData()) ATH_CHECK(m_XAMPPInfo->NewEventVariable<double>("SherpaVjetsNjetsWeight"));
        if (!isData()) ATH_CHECK(m_XAMPPInfo->NewEventVariable<int>("treatAsYear"));
	ATH_CHECK(m_XAMPPInfo->NewEventVariable<char>("HasTauCand"));
        ATH_CHECK(m_XAMPPInfo->NewEventVariable<float>("MtTauCand"));
        ATH_CHECK(m_XAMPPInfo->NewEventVariable<int>("NtracksTauCand"));
        
        ATH_CHECK(m_XAMPPInfo->NewEventVariable<float>("MetTST_mpx"));
        ATH_CHECK(m_XAMPPInfo->NewEventVariable<float>("MetTST_mpy"));
        ATH_CHECK(m_XAMPPInfo->NewEventVariable<float>("MetCST_mpx"));
        ATH_CHECK(m_XAMPPInfo->NewEventVariable<float>("MetCST_mpy"));
        ATH_CHECK(m_XAMPPInfo->NewEventVariable<float>("MetTrack_mpx"));
        ATH_CHECK(m_XAMPPInfo->NewEventVariable<float>("MetTrack_mpy"));
        
        ATH_CHECK(m_XAMPPInfo->NewEventVariable<float>("ETsumFCal"));
        ATH_CHECK(m_XAMPPInfo->NewEventVariable<float>("Centrality"));
        ATH_CHECK(m_XAMPPInfo->NewEventVariable<int>("PU_Vtx"));
        ATH_CHECK(m_XAMPPInfo->NewEventVariable<int>("NTracks"));
        
        //ATH_CHECK(m_XAMPPInfo->NewEventVariable<int>("MuonQuality"));
        
        
        // Now add the branches for the particle containers
        ATH_CHECK(m_XAMPPInfo->BookParticleStorage("Elec"));
        XAMPP::ParticleStorage* ElectronStore = m_XAMPPInfo->GetParticleStorage("Elec");
        ATH_CHECK(ElectronStore->SaveFloat("charge"));

        ATH_CHECK(m_XAMPPInfo->BookParticleStorage("Muon"));
        XAMPP::ParticleStorage* MuonStore = m_XAMPPInfo->GetParticleStorage("Muon");
        ATH_CHECK(MuonStore->SaveFloat("charge"));
        ATH_CHECK(MuonStore->SaveFloat("ptcone20"));
        ATH_CHECK(MuonStore->SaveFloat("ptcone30"));
        ATH_CHECK(MuonStore->SaveFloat("ptcone40"));
        ATH_CHECK(MuonStore->SaveVariable<unsigned char>("quality"));
        ATH_CHECK(MuonStore->SaveVariable<unsigned char>("outerSmallHits"));
        ATH_CHECK(MuonStore->SaveVariable<unsigned char>("outerLargeHits"));
        ATH_CHECK(MuonStore->SaveVariable<unsigned char>("outerLargeHoles"));
        ATH_CHECK(MuonStore->SaveVariable<unsigned char>("outerSmallHoles"));
        //ATH_CHECK(MuonStore->SaveFloat("eta"));
        //ATH_CHECK(MuonStore->SaveVariable<unsigned char>("passesIDCuts"));
        //ATH_CHECK(MuonStore->SaveVariable<unsigned char>("passesHighPtCuts"));
        ATH_CHECK(MuonStore->SaveVariable<unsigned short>("muonType"));
        //ATH_CHECK(MuonStore->SaveVariable<unsigned char>("numberOfPrecisionHoleLayers"));
        //ATH_CHECK(MuonStore->SaveVariable<unsigned char>("numberOfPresionLayers"));
        //ATH_CHECK(MuonStore->SaveVariable<unsigned char>("type"));

        ATH_CHECK(m_XAMPPInfo->BookParticleStorage("Jet"));
        XAMPP::ParticleStorage* JetStore = m_XAMPPInfo->GetParticleStorage("Jet");
        //ATH_CHECK(JetStore->SaveChar("bjet"));
        ATH_CHECK(JetStore->SaveFloat("Jvt"));
        ATH_CHECK(JetStore->SaveFloat("JvtJvfcorr"));
        ATH_CHECK(JetStore->SaveFloat("JvtRpt"));
        //ATH_CHECK(JetStore->SaveFloat("TrackSumPt"));
        //ATH_CHECK(JetStore->SaveFloat("SumPtTrkPt500"));
        ATH_CHECK(JetStore->SaveChar("isTauCand"));
        //ATH_CHECK(JetStore->SaveFloat("EMFrac"));
        //ATH_CHECK(JetStore->SaveFloat("HECFrac"));
        //ATH_CHECK(JetStore->SaveFloat("DetectorEta"));
        //ATH_CHECK(JetStore->SaveDouble("MV2c10"));
        ATH_CHECK(JetStore->SaveInteger("NTrks"));
        
        //ATH_CHECK(m_XAMPPInfo->BookParticleStorage("CaloSum"));
        //XAMPP::ParticleStorage* CaloSumStore = m_XAMPPInfo->GetParticleStorage("CaloSum");
        //ATH_CHECK(CaloSumStore->SaveFloat("et"));
 
        //if (!isData()) ATH_CHECK(JetStore->SaveInteger("ConeTruthLabelID"));

        if (doTruth()) {
            ATH_CHECK(m_XAMPPInfo->BookParticleStorage("TruthParticles", false, false));
            XAMPP::ParticleStorage* TruthStore = m_XAMPPInfo->GetParticleStorage("TruthParticles");
            ATH_CHECK(TruthStore->SaveFloat("charge"));
            ATH_CHECK(TruthStore->SaveInteger("pdgId"));

            // for TruthJet, save trees with (eta, phi, pt, m) -> set StoreMass=true
            ATH_CHECK(m_XAMPPInfo->BookParticleStorage("TruthJet", true));
            //XAMPP::ParticleStorage* TruthStore = m_XAMPPInfo->GetParticleStorage("TruthJet");
        }

        return StatusCode::SUCCESS;
    }

    double HeavyIonAnalysisHelper::GetTotalWeight() {
        static XAMPP::Storage<double>* dec_GenW = m_XAMPPInfo->GetVariableStorage<double>("GenWeight");
        static XAMPP::Storage<double>* dec_EleWeight = m_XAMPPInfo->GetVariableStorage<double>("EleWeight");
        static XAMPP::Storage<double>* dec_MuoWeight = m_XAMPPInfo->GetVariableStorage<double>("MuoWeight");
        static XAMPP::Storage<double>* dec_JetWeight = m_XAMPPInfo->GetVariableStorage<double>("JetWeight");
        static XAMPP::Storage<double>* dec_muWeight = m_XAMPPInfo->GetVariableStorage<double>("muWeight");
        //static XAMPP::Storage<double>* dec_SherpaVjetsNjetsWeight = m_XAMPPInfo->GetVariableStorage<double>("SherpaVjetsNjetsWeight");

        double w = dec_GenW->GetValue();
        if (dec_EleWeight) w *= dec_EleWeight->GetValue();
        if (dec_MuoWeight) w *= dec_MuoWeight->GetValue();
        if (dec_JetWeight) w *= dec_JetWeight->GetValue();
        if (dec_muWeight) w *= dec_muWeight->GetValue();
        //if (dec_SherpaVjetsNjetsWeight) w *= dec_SherpaVjetsNjetsWeight->GetValue();
        if (!isData()) {
            static XAMPP::Storage<double>* dec_SherpaVjetsNjetsWeight = m_XAMPPInfo->GetVariableStorage<double>("SherpaVjetsNjetsWeight");
            if (dec_SherpaVjetsNjetsWeight) w *= dec_SherpaVjetsNjetsWeight->GetValue();
        }
        return w;
    }
    
    

    StatusCode HeavyIonAnalysisHelper::ComputeEventVariables() {

        //First lets define the Pointer to the Storage elements
        //static XAMPP::Storage<int>* dec_NBJets = m_XAMPPInfo->GetVariableStorage<int>("N_BJets");
        static XAMPP::Storage<int>* dec_NLeps = m_XAMPPInfo->GetVariableStorage<int>("N_SignalLeptons");
        static XAMPP::Storage<int>* dec_NBaseLeps = m_XAMPPInfo->GetVariableStorage<int>("N_BaselineLeptons");
        static XAMPP::Storage<int>* dec_NJets = m_XAMPPInfo->GetVariableStorage<int>("N_Jets");
        static XAMPP::Storage<float>* dec_Mll = m_XAMPPInfo->GetVariableStorage<float>("Mll");
        //static XAMPP::Storage<float>* dec_Mmuon = m_XAMPPInfo->GetVariableStorage<float>("Mmuon");
        static XAMPP::Storage<char>* dec_IsOS = m_XAMPPInfo->GetVariableStorage<char>("IsOS");
        static XAMPP::Storage<char>* dec_IsSF = m_XAMPPInfo->GetVariableStorage<char>("IsSF");
        static XAMPP::Storage<float>* dec_HT = m_XAMPPInfo->GetVariableStorage<float>("HT");
        static XAMPP::Storage<float>* dec_HtSig = m_XAMPPInfo->GetVariableStorage<float>("HtSig");
        static XAMPP::Storage<float>* dec_Meff = m_XAMPPInfo->GetVariableStorage<float>("Meff");
        static XAMPP::Storage<float>* dec_ZWindow = m_XAMPPInfo->GetVariableStorage<float>("ZWindow");
        static XAMPP::Storage<XAMPPmet>* dec_XAMPPmetTST = m_XAMPPInfo->GetVariableStorage < XAMPPmet > ("MetTST");
        static XAMPP::Storage<XAMPPmet>* dec_XAMPPmetCST = m_XAMPPInfo->GetVariableStorage < XAMPPmet > ("MetCST");
        static XAMPP::Storage<XAMPPmet>* dec_XAMPPmetTrack = m_XAMPPInfo->GetVariableStorage < XAMPPmet > ("MetTrack");
        
        static XAMPP::Storage<float>* dec_XAMPPmetTST_mpx = m_XAMPPInfo->GetVariableStorage < float > ("MetTST_mpx");
        static XAMPP::Storage<float>* dec_XAMPPmetCST_mpx = m_XAMPPInfo->GetVariableStorage < float > ("MetCST_mpx");
        static XAMPP::Storage<float>* dec_XAMPPmetTrack_mpx = m_XAMPPInfo->GetVariableStorage < float > ("MetTrack_mpx");
        static XAMPP::Storage<float>* dec_XAMPPmetTST_mpy = m_XAMPPInfo->GetVariableStorage < float > ("MetTST_mpy");
        static XAMPP::Storage<float>* dec_XAMPPmetCST_mpy = m_XAMPPInfo->GetVariableStorage < float > ("MetCST_mpy");
        static XAMPP::Storage<float>* dec_XAMPPmetTrack_mpy = m_XAMPPInfo->GetVariableStorage < float > ("MetTrack_mpy");
        
        static XAMPP::Storage<float>* dec_ETsumFCal = m_XAMPPInfo->GetVariableStorage<float>("ETsumFCal");
        static XAMPP::Storage<float>* dec_Centrality = m_XAMPPInfo->GetVariableStorage<float>("Centrality");
        static XAMPP::Storage<int>* dec_PU_Vtx = m_XAMPPInfo->GetVariableStorage<int>("PU_Vtx");
        static XAMPP::Storage<int>* dec_NTracks = m_XAMPPInfo->GetVariableStorage<int>("NTracks");
        //static XAMPP::Storage<int>* dec_MuonQuality = m_XAMPPInfo->GetVariableStorage<int>("MuonQuality");

        if (!isData()) {
            static XAMPP::Storage<double>* dec_TotalWeight = m_XAMPPInfo->GetVariableStorage<double>("TotalWeight");
            ATH_CHECK(dec_TotalWeight->Store(GetTotalWeight()));
        }
        static XAMPP::Storage<char>* dec_HasTauCand = m_XAMPPInfo->GetVariableStorage<char>("HasTauCand");
        static XAMPP::Storage<float>* dec_MtTauCand = m_XAMPPInfo->GetVariableStorage<float>("MtTauCand");
        static XAMPP::Storage<int>* dec_NtracksTauCand = m_XAMPPInfo->GetVariableStorage<int>("NtracksTauCand");        

        // Then lets calculate our event variables... there are lots of functions in the AnalysisUtils in order to do that, feel free to add other functions for this purpose
        int NLeps = m_electron_selection->GetSignalElectrons()->size() + m_muon_selection->GetSignalMuons()->size();
        int NBaseLeps = m_electron_selection->GetBaselineElectrons()->size() + m_muon_selection->GetBaselineMuons()->size();
        //int NBaseMuons = m_muon_selection->GetBaselineMuons()->size();
        int NJets = m_jet_selection->GetSignalJets()->size();
        
        
        float MetTST_mpx = dec_XAMPPmetTST->GetValue()->mpx();
        float MetTST_mpy = dec_XAMPPmetTST->GetValue()->mpy();
        float MetCST_mpx = dec_XAMPPmetCST->GetValue()->mpx();
        float MetCST_mpy = dec_XAMPPmetCST->GetValue()->mpy();
        float MetTrack_mpx = dec_XAMPPmetTrack->GetValue()->mpx();
        float MetTrack_mpy = dec_XAMPPmetTrack->GetValue()->mpy();
        
        /*evtStore();
        const xAOD::HIEventShapeContainer *hiue(0); 

   	if ( evtStore()->retrieve(hiue, "CaloSums").isFailure() ) {
      		std::cout << "Can not get HIEventShape Container " << std::endl;
      		return -999; 
    	} 
    	
    	xAOD::HIEventShapeContainer::const_iterator es_itr = hiue->begin(); 
  	xAOD::HIEventShapeContainer::const_iterator es_end = hiue->end();

  	double m_fcalEt = 0;

  	for (;es_itr!=es_end;es_itr++ )

	    {
	     float et = (*es_itr)->et();
	      const std::string name = (*es_itr)->auxdataConst<std::string>("Summary");
	      if (name=="FCal") m_fcalEt = et;
	    }

  	//return m_fcalEt;
  	float ETsumFCal = m_fcalEt;*/
  	
  	//evtStore();
  	//const xAOD::HICentralityTool *hiue(0);
  	
  	 //const xAOD::Vertex* SUSYObjDef_xAOD::GetPrimVtx() const {
	 const xAOD::VertexContainer* vertices(0);
	 xAOD::VertexContainer::const_iterator vtx_itr = vertices->begin();
	 xAOD::VertexContainer::const_iterator vtx_end = vertices->end();
    	const xAOD::Vertex* pileup = 0;
    	int pile_up_vertices=0;
    	int trackn = 0;
        for(;vtx_itr!=vtx_end;++vtx_itr)
	       {
		  if((*vtx_itr)->vertexType()==xAOD::VxType::PileUp)
		    {
		        pileup = (*vtx_itr);
		        if((int) pileup->nTrackParticles()>trackn) trackn = pileup->nTrackParticles();
		        if(trackn>6) pile_up_vertices=1;
		    }
	       }//if the number of tracks>6 then this is a pile up vertex
	  
  	
  	auto centTool = make_unique<HI::HICentralityTool>("CentralityTool");
	ANA_CHECK( centTool->setProperty("RunSpecies","pPb2016") );
	ANA_CHECK( centTool->initialize() );
	
	float ETsumFCal = 0;
        ETsumFCal = centTool->getCentralityEstimator();
	float Centrality = 0;
	Centrality = centTool->getCentralityPercentile();


        // the following lines can be used for event based debugging
//        const xAOD::EventInfo* Info = m_XAMPPInfo->GetOrigInfo();
//        if ((Info->eventNumber() == 146754) || (Info->eventNumber() == 44091) || (Info->eventNumber() == 7830)) {
//            std::cout << "--------------------------------------" << std::endl;
//            std::cout << "Event No. " << Info->eventNumber() << std::endl;
//            static SG::AuxElement::Decorator<char> dec_baseline("baseline");
//            static SG::AuxElement::Decorator<char> dec_bad("bad");
//            static SG::AuxElement::Decorator<char> dec_bjet("bjet");
//            static SG::AuxElement::Decorator<char> dec_passOR("passOR");
//            static SG::AuxElement::Decorator<int> dec_NTrks("NTrks");
//            static SG::AuxElement::Decorator<char> dec_signal("signal");
//            static SG::AuxElement::Decorator<double> dec_MV2c20("MV2c20");
//            static SG::AuxElement::Decorator<char> dec_cosmic("cosmic");
//            for (auto const &jet : *m_jet_selection->GetBaselineJets()) {
//                XAMPP::PromptParticle(jet, Form("PassOR: %d, isBad: %d, isB: %d, NTrks: %i, MV2c20: %f, isBaseline: %d, isSignal: %d", dec_passOR(*jet), dec_bad(*jet), dec_bjet(*jet), dec_NTrks(*jet), dec_MV2c20(*jet), dec_baseline(*jet), dec_signal(*jet)));
//            }
//            for (auto const &el : *m_electron_selection->GetBaselineElectrons()) {
//                XAMPP::PromptParticle(el, Form("PassOR: %d, isBaseline: %d, isSignal: %d", dec_passOR(*el), dec_baseline(*el), dec_signal(*el)));
//            }
//            for (auto const &mu : *m_muon_selection->GetBaselineMuons()) {
//                XAMPP::PromptParticle(mu, Form("PassOR: %d, isBaseline: %d, isSignal: %d, badMuon: %d, cosmic: %d", dec_passOR(*mu), dec_baseline(*mu), dec_signal(*mu), dec_bad(*mu), dec_cosmic(*mu)));
//            }
//            if (dec_XAMPPmetTST->GetValue()) {
                //std::cout << "MetTST: met()=" << dec_XAMPPmetTST->GetValue()->met() << " phi()=" << dec_XAMPPmetTST->GetValue()->phi() << " mpx = " << dec_XAMPPmetTST->GetValue()->mpx() << " mpy = " << dec_XAMPPmetTST->GetValue()->mpy() << std::endl;
                //std::cout << "MetCST: met()=" << dec_XAMPPmetCST->GetValue()->met() << " phi()=" << dec_XAMPPmetCST->GetValue()->phi() << " mpx = " << dec_XAMPPmetCST->GetValue()->mpx() << " mpy = " << dec_XAMPPmetCST->GetValue()->mpy() << std::endl;
                //std::cout << "MetTrack: met()=" << dec_XAMPPmetTrack->GetValue()->met() << " phi()=" << dec_XAMPPmetTrack->GetValue()->phi() << " mpx = " << dec_XAMPPmetTrack->GetValue()->mpx() << " mpy = " << dec_XAMPPmetTrack->GetValue()->mpy() << std::endl;
//            }
//        }

        //int NBJets = m_jet_selection->GetBJets()->size();
        float Ht = XAMPP::CalculateJetHt(m_jet_selection->GetSignalJets());
        //float LeptonHt = 0.;
        //if (m_muon_selection->GetSignalMuons()->size() > 0 ) 
        float LeptonHt = XAMPP::CalculateLeptonHt(m_electron_selection->GetSignalElectrons(), m_muon_selection->GetSignalMuons());
        
        float MtTauCand = -1.;
        int NtracksTauCand = -1.;
        bool HasTauCand = XAMPP::HasTauCandidate(m_jet_selection->GetSignalJets(), dec_XAMPPmetTST->GetValue(), MtTauCand, NtracksTauCand);
        

        float HtSig = (dec_XAMPPmetTST->GetValue()->met()) * XAMPP::MeVToGeV / (TMath::Sqrt(Ht * XAMPP::MeVToGeV));
        bool IsOS = false;
        bool IsSF = false;
        float Mll = -1.;
        //static XAMPP::Storage<char>* dec_isTauCand = m_XAMPPInfo->GetVariableStorage<char>("isTauCand");
        //bool isTauCand = false;
        if (m_electron_selection->GetSignalElectrons()->size() > 1) {
            IsOS = XAMPP::OppositeSign(*m_electron_selection->GetSignalElectrons()->at(0), *m_electron_selection->GetSignalElectrons()->at(1));
            IsSF = XAMPP::SameFlavour(*m_electron_selection->GetSignalElectrons()->at(0), *m_electron_selection->GetSignalElectrons()->at(1));
            Mll = XAMPP::InvariantMass(*m_electron_selection->GetSignalElectrons()->at(0), *m_electron_selection->GetSignalElectrons()->at(1));
        }
        
        /*if (m_muon_selection->GetBaselineMuons()->size() > 1) {
        //if (NBaseMuons > 1) 
            //IsOS = XAMPP::OppositeSign(*m_muon_selection->GetSignalMuons()->at(0), *m_muon_selection->GetSignalMuons()->at(1));
            //IsSF = XAMPP::SameFlavour(*m_muon_selection->GetSignalMuons()->at(0), *m_muon_selection->GetSignalMuons()->at(1));
            //Mll = XAMPP::InvariantMass(*m_muon_selection->GetSignalMuons()->at(0), *m_muon_selection->GetSignalMuons()->at(1));
            IsOS = XAMPP::OppositeSign(*m_muon_selection->GetBaselineMuons()->at(0), *m_muon_selection->GetBaselineMuons()->at(1));
            IsSF = XAMPP::SameFlavour(*m_muon_selection->GetBaselineMuons()->at(0), *m_muon_selection->GetBaselineMuons()->at(1));
            Mll = XAMPP::InvariantMass(*m_muon_selection->GetBaselineMuons()->at(0), *m_muon_selection->GetBaselineMuons()->at(1));
            //isTauCand = XAMPP::HasTauCandidate(*m_muon_selection->GetSignalMuons()->at(0), *m_muon_selection->GetSignalMuons()->at(1));
        }*/
        float ZWindow = fabs(Mll - 91.0e3); 

        //Finally store the variables they are then used by the Cut Class or just written out into the trees
        //ATH_CHECK(dec_NBJets->Store(NBJets));
        ATH_CHECK(dec_NLeps->Store(NLeps));
        ATH_CHECK(dec_NBaseLeps->Store(NBaseLeps));
        ATH_CHECK(dec_NJets->Store(NJets));
        
        ATH_CHECK(dec_HasTauCand->Store(HasTauCand));
        ATH_CHECK(dec_MtTauCand->Store(MtTauCand));
        ATH_CHECK(dec_NtracksTauCand->Store(NtracksTauCand));        
        
        ATH_CHECK(dec_HtSig->Store(HtSig));
        //ATH_CHECK(dec_IsOS->Store(IsOS));
        //ATH_CHECK(dec_IsSF->Store(IsSF));
        //ATH_CHECK(dec_Mll->Store(Mll));
        //ATH_CHECK(dec_Mmuon->Store(Mmuon));
        ATH_CHECK(dec_HT->Store(Ht));
        ATH_CHECK(dec_Meff->Store(Ht + LeptonHt + dec_XAMPPmetTST->GetValue()->met()));
        ATH_CHECK(dec_ZWindow->Store(ZWindow));
        
        ATH_CHECK(dec_XAMPPmetTST_mpx->Store(MetTST_mpx));
        ATH_CHECK(dec_XAMPPmetTST_mpy->Store(MetTST_mpy));
        ATH_CHECK(dec_XAMPPmetCST_mpx->Store(MetCST_mpx));
        ATH_CHECK(dec_XAMPPmetCST_mpy->Store(MetCST_mpy));
        ATH_CHECK(dec_XAMPPmetTrack_mpx->Store(MetTrack_mpx));
        ATH_CHECK(dec_XAMPPmetTrack_mpy->Store(MetTrack_mpy));
        
        ATH_CHECK(dec_ETsumFCal->Store(ETsumFCal));
        ATH_CHECK(dec_Centrality->Store(Centrality));
        //ATH_CHECK(dec_PU_Vtx->Store(pile_up_vertices));
        //ATH_CHECK(dec_NTracks->Store(trackn));
        //ATH_CHECK(dec_MuonQuality->Store(MuonQuality));
        
        

        // fill the particle containers for the output
        static XAMPP::ParticleStorage* ElectronStore = m_XAMPPInfo->GetParticleStorage("Elec");
        ATH_CHECK(ElectronStore->Fill(m_electron_selection->GetSignalElectrons()));
        static XAMPP::ParticleStorage* MuonStore = m_XAMPPInfo->GetParticleStorage("Muon");
        ATH_CHECK(MuonStore->Fill(m_muon_selection->GetSignalMuons()));
        //ATH_CHECK(MuonStore->Fill(m_muon_selection->GetBaselineMuons()));
        static XAMPP::ParticleStorage* JetStore = m_XAMPPInfo->GetParticleStorage("Jet");
        ATH_CHECK(JetStore->Fill(m_jet_selection->GetSignalJets()));

        if (doTruth() && m_XAMPPInfo->GetSystematic() == m_systematics->GetNominal()) {
            XAMPP::ParticleStorage* TruthStore = m_XAMPPInfo->GetParticleStorage("TruthParticles");
            ATH_CHECK(TruthStore->Fill(m_truth_selection->GetTruthParticles()));
            XAMPP::ParticleStorage* TruthJetStore = m_XAMPPInfo->GetParticleStorage("TruthJet");
            ATH_CHECK(TruthJetStore->Fill(m_truth_selection->GetTruthSignalJets()));

        }

       
        //ATH_CHECK(dec_isTauCand->Store(isTauCand));


        return StatusCode::SUCCESS;
    }

    bool HeavyIonAnalysisHelper::AcceptEvent() {
        if (isData()) return true;

        // METFilterDuplicateCut:
        int mcChannelNumber = m_XAMPPInfo->mcChannelNumber();

        static XAMPP::Storage<double>* dec_SherpaVjetsNjetsWeight = m_XAMPPInfo->GetVariableStorage<double>("SherpaVjetsNjetsWeight");
        float SherpaVjetsNjetsWeight = 1.;
        if (((mcChannelNumber >= 363102) && (mcChannelNumber <= 363122)) || ((mcChannelNumber >= 363331) && (mcChannelNumber <= 363483))) SherpaVjetsNjetsWeight = m_susytools->getSherpaVjetsNjetsWeight();
        ATH_CHECK(dec_SherpaVjetsNjetsWeight->ConstStore(SherpaVjetsNjetsWeight));

        static XAMPP::Storage<int>* dec_treatAsYear = m_XAMPPInfo->GetVariableStorage<int>("treatAsYear");
        ATH_CHECK(dec_treatAsYear->ConstStore(m_susytools->treatAsYear()));
        
        // do not use anymore for ttV samples with e4631
//        return !m_truth_selection->ttZqqVeto(Info->mcChannelNumber());
        return true;
    }

}
